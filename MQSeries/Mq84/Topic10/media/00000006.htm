<!doctype html public "-//W3C//DTD HTML 4.0//EN">
<html>
<head><title>Topic 10 - MQSeries clients - Audio transcript </title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFCC66">

<font face="Arial,Helvetica">

<H1>MQ84 - Topic 10: MQSeries clients</h1>

<FONT SIZE="+2">An MQSeries client </FONT>
<br>
The component that connects a client application and the MQSeries queue manager is called the MQI channel.
<P>
The channel consists of client attachment code bound to the client application and a server channel definition at the queue manager.
<P>
Within an MQI channel, the data flow is bi-directional and the connection is <I>synchronous</I>.
<P>
Click Next to continue and to see more detail on how an MQSeries client application operates.
<br><br><br>

<FONT SIZE="+2">An MQSeries client</FONT>
<br>
The MQI channel is started automatically as soon as an application running on the client system issues an MQCONN call and will be stopped when the application issues an MQDISC call.
<P>
An MQI call within an application on the client system acts as a remote procedure call to the server queue manager.
<P>
Most of the code that is executed in servicing an MQI call resides on the server system.
<P>
The server connection acts as a surrogate for the client application and issues the MQI call to the server queue manager on behalf of the application.
<P>
When the call has been executed, the server connection sends the output parameters of the call over the network to the client connection which passes them on to the application.
<br><br><br>


<FONT SIZE="+2">An MQSeries client</FONT>
<br>
The full range of MQI calls and options is  available to an application running as an MQSeries client, but in certain environments there may be restrictions relating to system resources.
<P>
Here is a list of some restrictions on the use of the available options with MQI calls.
<P>
You have to link a different  MQI stub when an application runs as a client. If an application receives the reason code of queue manager not available on an MQCONN call, it could mean that the wrong MQI stub was linked.
<br><br><br>


<FONT SIZE="+2">Installation of  an MQSeries client</FONT>
<br>
There are several ways  to install an MQSeries client.
<P>
Click each field for details of each method.
<br><br><br>


<FONT SIZE="+2">Defining an MQI channel</FONT>
<br>
The MQI channel is defined as a client connection on the client application system and as a server connection to the queue manager on the server system.<br>
In an MQI channel, the flow of information is bi-directional, so you do not  need to define two different channels.
<P>
Only the simplest of several ways of defining a client connection channel is covered here.
<P>
Click on either the server connection or the client connection to see examples of how to define a relevant connection.
<br><br><br>


<FONT SIZE="+2">Channel instances</FONT>
<br>
Many clients can connect to the same queue manager using separate instances of the same MQI channel.
<P>
The MQSERVER environment variable is used by the client to specify which channel, what network protocol and what network address it wishes to connect to.
<P>
Each of the 4 clients has the same value for the parameters of MQSERVER. <br>
Therefore they are connecting to the same queue manager, but their MQSeries commands will use separate images of the same MQI channel.
<br><br><br>


<FONT SIZE="+2">Auto definition of channels</FONT>
<br>
When a client application issues an MQ connection call, the queue manager establishes a server to client channel. This channel will carry all the MQSeries traffic, in both directions, between the client and the queue manager.
<P>
Each client will have it’s own image of this channel.  It will be built from either a previously defined or default client server channel object.
<P>
If the channel needs to be built from a default channel definition, the queue manager channel auto definition parameter must be enabled.
<P>
Some of the attributes of the channel will be negotiated between the queue manager and the client interface.
<P>
After the channel has been established, the MQ connect call will be completed and control returned to the application. The application would then be expected to issue further MQI calls to this queue manager utilizing this channel.
<P>
When the client disconnects from the queue manager this image of the server client channel will be automatically deleted.
<br><br><br>


<FONT SIZE="+2">DOS and Windows 3.1 clients</FONT>
<br>
On DOS and Windows 3.1 clients, the handling of error logs, FFDC records and trace files is handled differently from the other platforms.
<P>
Click each of the boxes for more details.
<br><br><br>



</font>
</body>
</html>
