<html>
<head><title>Topic 13 - Syncpoint control - Audio transcript </title></head>
<body bgcolor="#FFCC66">

<font face="Arial,Helvetica">

<H1>MQ83 - Topic 13: Syncpoint control</h1>

<FONT SIZE="+2">Units of work</FONT>
<br>
When a program puts a message on a queue within a unit of work, that message is made visible to other programs only when the program commits the unit of work.
<P>
To commit a unit of work, all updates must be successful to preserve data integrity. If the program detects an error and decides that the put operation should not be made permanent, it can back out the unit of work.
<P>
Similarly, when a program gets a message from a queue within a unit of work, that message remains on the queue until the program commits the unit of work, but the message is not available to be retrieved by other programs. The message is permanently deleted from the queue when the program commits the unit of work. If the program backs out the unit of work, MQSeries restores the queue to the state it was in before the program performed the get operation.
<P>
The decision to commit or back out the changes at certain logical points  is made by the application. These logical points are called syncpoints (or synchronization points).
<P>
The period of processing a set of updates between two syncpoints is called a unit of work. Several MQGETs and MQPUTs can be part of a unit of work.
<P>
If the program doesn’t issue any syncpoints of its own, the decision to commit or back out any changes is taken at the end of the application.<br>
A back out will also occur if there are any failures of the application, the queue manager, or the whole operating system itself.
<P>
In MQSeries, a unit of work is committed using the MQCMIT call.<br>
A unit of work is backed out using the MQBACK call.<br>
These calls are not supported in all environments. Details about the supported
environments will follow later in this topic.
<P>
Syncpoints are requested by the program and written by the data management system that owns the resource. These systems are called <I>resource managers</I>.
More than one resource manager may be involved in a syncpoint process.
For example, a program can issue not only MQSeries calls but also SQL statements within one unit of work.
In this case, <I>syncpoint coordination</I> must take place to ensure data integrity.
<br><br><br>


<FONT SIZE="+2">MQPUT call within syncpoint control</FONT>
<br>
A program can put a message on a queue with or without syncpoint control.
Here you see a program that puts three messages on a queue within one unit of work.<br>
To achieve this the put message option MQPMO_SYNCPOINT is used.
<P>
Within syncpoint control, a message does not become available for retrieval until it is committed. However, it contributes to the current queue depth count. That is, the current queue depth shows both committed and uncommitted messages.<br>
Therefore, a long-running program that does not commit can cause a queue to fill up.
<P>
The previously written messages are now committed using the MQCMIT call. <br>They become available for retrieval.
<br><br><br>

<FONT SIZE="+2">MQPUT call within syncpoint control</FONT>
<br>
A program can get a message on a queue with or without syncpoint control.
Here you see a program that gets two messages from a queue within one unit of work.<br>
To achieve this, the put message option MQGMO_SYNCPOINT is used.
<P>
Within syncpoint control, a message  is not actually removed from a queue until it is committed, but it is marked so that it cannot be retrieved by other applications.<br>
The current queue depth count of a queue also does not change until the syncpoint, because the current queue depth shows both committed and uncommitted messages.<br>
When a backout occurs, the message again becomes retrievable for other applications.
<P>
The previously retrieved messages are now committed using the MQCMIT call. They are removed from the queue.
<br><br><br>

<FONT SIZE="+2">The MQCMIT call</FONT>
<br>
There is one input parameter on an MQCMIT call: the connection handle.
Only one unit of work can be committed per connection handle.<br>
There are two output parameters: the completion code and the reason code.
The call is supported on all queue managers except for MQSeries for AS/400.
On MQSeries for OS/390, this call is only supported in the batch environment including IMS batch DL/I.
<P>
There are a number of reason codes that can be returned by the queue manager for this call. However, the application only needs to check the completion code to establish whether the call was successful or not.<br>
For possible reason codes see the <I>MQSeries Application Programming Reference</I>.
<P>
An MQSeries client application can use this call except when it is connected to an MQSeries for AS/400 queue manager.
<P>
This shows the names of the parameters as they appear in the <I>MQSeries Application Programming Reference</I>.<br>
Move the mouse over the parameter for a brief description of the parameter and to discover its data type.
<br><br><br>


<FONT SIZE="+2">Coding the MQCMIT call</FONT>
<br>
Here is an example of a unit of work that consists of an MQGET and an MQPUT call. Click each block of pseudo-code in turn to read a commentary on what the code does.
<P>
Refer to the <I>MQSeries Application Programming Reference</I> if you wish to see examples in the programming language that you use.
<br><br><br>



<FONT SIZE="+2">The MQBACK call</FONT>
<br>
There is one input parameter on an MQBACK call: the connection handle.
Only one unit of work can be backed out per connection handle.<br>
There are two output parameters: the completion code and the reason code.<br>
The call is supported on all queue managers except for MQSeries for AS/400.
On MQSeries for OS/390, this call is only supported in the batch environment including IMS batch DL/I.
<P>
There are a number of reason codes that can be returned by the queue manager for this call. However, the application only needs to check the completion code to establish whether the call was successful or not.<br>
For possible reason codes see the <I>MQSeries Application Programming Reference</I>.
<P>
An MQSeries client application can use this call except when it is connected to an MQSeries for AS/400 queue manager.
<P>
This shows the names of the parameters as they appear in the <I>MQSeries Application Programming Reference</I>.<br>
Move the mouse over the parameter for a brief description of the parameter and to discover its data type.
<br><br><br>


<FONT SIZE="+2">The backout count</FONT>
<br>
When a message that was retrieved by an MQGET call is backed out, it is restored to the queue in exactly the same place where it was before.<br>
When the program that backed out the message issues another MQGET call, it is probable that it will retrieve the same message again.<br>
This could cause the application to enter an endless loop.
<P>
To avoid this, MQSeries provides some information for handling already backed out messages.<br>
One is the <I>BackoutCount </I> field in the message descriptor.<br>
This is a count of the number of times that the message has been returned by the MQGET call as part of a unit of work and subsequently backed out.<br>
It is provided as an aid to the application in detecting processing errors that are based on message content.<br>
The count excludes MQGET calls that specified  the MQGMO_BROWSE_FIRST or MQGMO_BROWSE_NEXT options.
<br><br><br>



<FONT SIZE="+2">Coding the MQBACK call</FONT>
<br>
Here is an example of the use of the BackoutCount field in the message descriptor. Click each block of pseudo-code in turn to read a commentary on what the code does.
<P>
Refer to the <I>MQSeries Application Programming Reference</I> if you wish to see examples in the programming language that you use.
<br><br><br>


<FONT SIZE="+2">Global units of work</FONT>
<br>
Up to now, a unit of work only contains changes to MQSeries resources and is coordinated by a queue manager.<br>
In many situations, MQSeries is used as a vehicle to move data from one node to another. The data itself will then be stored on a database system.<br>
This shows an example of such an application:<br>
A message is retrieved from a queue and its application data is used to update a relational database.<br>
Then, a reply is formulated and put to the reply to queue.<br>
If everything is satisfactory, all activities including the database changes are committed.<br>
To ensure data integrity, this syncpoint must be coordinated between the two resource managers, MQSeries and the database management system.
<P>
A Version 5 queue manager is able to act as syncpoint coordinator.<br>
To achieve this, a so-called global unit of work must be defined before accessing any resources owned by the resource managers to be coordinated.
A <I>global unit of work</I> includes updates on resources belonging to more than one resource manager.<br>
A <I>local unit of work</I> only includes updates on resources belonging to one resource manager.
<P>
An MQBEGIN call must be used to start a global unit of work that is internally coordinated. This call is only available on Version 5 queue managers
MQCMIT and MQBACK calls are used in the same way as discussed earlier.
<br><br><br>


<FONT SIZE="+2">The MQBEGIN call</FONT>
<br>
There is one input parameter on an MQBEGIN call: the connection handle.<br>
It identifies the queue manager the application is connected to.<br>
There is one input/output parameter for the MQBEGIN call: the begin options structure.<br>
This is a structure that defines the options to be used for the call.<br>
At the moment all fields have fixed values.<br>
There are two output parameters: the completion code and the reason code.
There are a number of reason codes that can be returned by the queue manager for this call. However, the application only needs to check the completion code to establish whether the call was successful or not.<br>
For possible reason codes see the <I>MQSeries Application Programming Reference</I>.<br>
This shows the names of the parameters as they appear in the <I>MQSeries Application Programming Reference</I>.<br>
Move the mouse over the parameter for a brief description of the parameter and to discover its data type.
<br><br><br>


<FONT SIZE="+2">Database management systems support</FONT>
<br>
A database management system must be XA-compliant to participate in a global unit of work that is coordinated by MQSeries.<br>
This shows the currently supported database management systems.
<br><br><br>

<FONT SIZE="+2">External syncpoint coordinators</FONT>
<br>
MQSeries not only acts as a syncpoint coordinator in a global unit of work, it can also be coordinated by an external syncpoint coordinator.<br>
Transaction managers usually act as external syncpoint coordinators.
<P>
In environments like CICS and IMS on OS/390, an external syncpoint coordinator must be used even if MQSeries resources only are being updated within a unit of work. The MQCMIT and MQBACK calls are not supported in these environments.
<P>
In other environments, changes to MQSeries resources within a unit of work can be coordinated by the queue manager, but an external syncpoint coordinator is required if changes to the resources of other resource managers are also involved.<br>
The external syncpoint coordinator may also be used to coordinate changes to MQSeries resources only.
<P>
The situation regarding a Version 5 queue manager is similar except that global
units of work may be internally or externally coordinated - you have a choice.
<P>
Click each MQSeries product in turn to see the external syncpoint coordinators it supports.
<br><br><br>


<FONT SIZE="+2">Skipping backout</FONT>
<br>
The get message option MQGMO_MARK_SKIP_BACKOUT
allows a unit of work to be backed out, but without reinstating on the queue the message that was marked with this option.<br>
Other resource updates, however, are still backed out.<br>
This is useful if a message is retrieved by an application, but only after some resource updates have been made does it become apparent that the unit of work cannot complete successfully.
<P>
If this option had not been specified, a normal backout would cause the message to be reinstated on the queue and the same sequence of events would occur when the message was next retrieved.<br>
Using this option on the original MQGET, however, means that the backout will cause the updates to the other resources to be backed out, as is required, but the message won’t be backed out.<br>
The application can now perform some exception handling.
<br><br><br>

<FONT SIZE="+2">Business transactions and units of work</FONT>
<br>
Care must be taken if MQSeries is used as a transport medium for data of database systems that have to be synchronized.<br>
This shows two applications updating two databases on different locations.
In a first unit of work, the application on the left side gets a message from a queue, updates a database, puts a message to a transmission queue and then commits all the activities.<br>
In a second unit of work, the MCAs move the message from the transmission queue to its destination queue.<br>
In a third unit of work, the application on the right side gets the message from the queue and updates its database to reflect the changes that have already been made by the first application.
<P>
The breakdown into three units of work is because of the asynchronous nature of MQSeries.<br>
The use of units of work and the assured delivery property of MQSeries ensures that no business data is lost.<br>
But inconsistency of the business data exists for a short while.<br>
This may or may not be acceptable in the application environment.
<br><br><br>

</font>
</body>
</html>
