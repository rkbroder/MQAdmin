<!doctype html public "-//W3C//DTD HTML 4.0//EN">
<html>
<head><title>Topic 9 - The MQI in the network - Audio transcript </title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFCC66">

<font face="Arial,Helvetica">

<H1>MQ84 - Topic 9: The MQI in the network</h1>

<FONT SIZE="+2"> What is the problem</FONT>
<br>
A travel agent enters the hotel requirements of a customer into the agency’s hotel reservation system.  The application packages the details of the requirements into a message and sends it to the room reservation system of the selected hotel.  The hotel reservation clerk looks at the request but detects that something is wrong.  The name of the customer is not decipherable and the request for 768 rooms cannot be taken seriously.
<P>
The problem here is that the two systems exchanging information use different representations for numeric and character data. But what does this actually mean?
<br><br><br>

<FONT SIZE="+2">What is the problem</FONT>
<br>
The data in the message needs to be converted so that it represents the same characters and numbers on the receiving system as it did on the sending system.  For example, the byte value <FONT FACE="Courier">X'88'</FONT>, which represents the character “h” on the sending system, should be converted to the value <FONT FACE="Courier">X'68'</FONT>, which represent the character “h” on the receiving system.  Similarly, the value <FONT FACE="Courier">X'0003'</FONT>, which represents the integer 3 on the sending system, should be converted to the value <FONT FACE="Courier">X'0300'</FONT>, which represents the integer 3 on the receiving system.  This process is called <I>data conversion</I>.

<br><br><br>


<FONT SIZE="+2">What is the problem</FONT>
<br>
Data conversion is required whenever a message is moved between two systems that use different representations for character and numeric data.  MQSeries automatically converts the character and numeric data in the message descriptor that accompanies a message, but it does not automatically convert the application data in the message - that is an application responsibility.  
<P>
There is a preferred approach to application data conversion,  and one alternative.  
<P>
Click the buttons to learn more about these.
<br><br><br>


<FONT SIZE="+2">Sending a message</FONT>
<br>
Application data conversion never takes place when a message is put on a queue.  However, it is the responsibility of the sending application to ensure that the message descriptor that accompanies a message contains the correct information to enable the conversion to be done later, if it is necessary.
<P>
There are three fields in the message descriptor that control application data conversion.  
<P>
Click the message descriptor and you will be shown the names of these fields.
<P>
Click each field for an explanation of its meaning and how it should be set by an application prior to issuing an MQPUT call.
<br><br><br>


<FONT SIZE="+2">Requesting data conversion </FONT>
<br>
Conversion of application data does not occur automatically, it must be requested, and can only be requested as an option on the MQGET call.
<P>
The message descriptor contains the encoding and character set id fields.
<P>
It is these fields that the queue manager checks, when requested, to see if conversion is required.
<P>
If it is required, the queue manager inspects the value of the format field, in the message descriptor. It is this field that then indicates how the message data is to be converted.
<br><br><br>


<FONT SIZE="+2">Conversion requested by a sending MCA</FONT>
<br>
The sending side of a channel supports the requesting of conversion of application data, by the use of the channel convert attribute.
<P>
When it is set to yes, the message channel agent issues the get request with the convert option.
<P>
All applications that create messages must ensure that the encoding, code character set id and format fields are set correctly for conversion to be possible.
<P>
The actual conversion of the message data is performed by a built-in conversion routine or a user written data conversion exit.
<P>
If the conversion of a message is unsuccessful, the message channel agent puts the message on the dead letter queue.
<br><br><br>


<FONT SIZE="+2">Summary</FONT>
<br>
If you are writing an application that sends messages which may subsequently require conversion, this is what you need to do, prior to issuing an MQPUT call to send a message, in order to ensure that they can be converted successfully.
<br><br><br>


<FONT SIZE="+2">Summary</FONT>
<br>
It is recommended that applications that retrieve messages, set these fields of the message descriptor prior to issuing an MQGET call.
<P>
This will ensure that if messages are sent from different platforms types, MQSeries will be able to support their conversion.
<br><br><br>


<FONT SIZE="+2">The command server</FONT>
<br>
All queue managers, except MQSeries for Windows Version 2.0 have a
command queue to support remote administration, the queue supports PCF messages, and is processed by the command server application.
<P>
The command server processes the messages, then puts the result as a PCF message on a reply-to queue.
<P>
This reply-to queue can be local or remote, thus enabling remote administration of the queue manager.
<P>
The command messages must be created and interpreted by an application.
An example of this is the supplied utility runmqsc.
<P>
Click command server and runmqsc for further details. Then, click Next to continue
<br><br><br>



<FONT SIZE="+2">The Dead Letter Queue</FONT>
<br>
An application program opens a remote queue, the message will be put on a transmission queue to be sent to the target queue on the remote queue manager.
<P>
If the message cannot be delivered, it is put on the dead letter queue at the receiving end of the channel, if one is defined.
<P>
If conversion is specified on the sending channel definition and a message cannot be converted, the message will be put on the queue manager dead letter queue on the sending side of the channel.
<br><br><br>



</font>
</body>
</html>
