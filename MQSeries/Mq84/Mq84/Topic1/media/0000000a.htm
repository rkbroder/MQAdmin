<!doctype html public "-//W3C//DTD HTML 4.0//EN">
<html>
<head><title>Topic 1 - A review of MQSeries - Audio transcript </title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFCC66">

<font face="Arial,Helvetica">

<H1>MQ84 - Topic 1: A review of MQSeries
</h1>

<FONT SIZE="+2">What is the problem?</FONT>
<br>
Most organizations need to be able to connect applications together. This includes connecting to applications over a network.
<P>
Networks often have a mixture of hardware and software platforms, and a mixture of communications protocols.
<P>
The problem, therefore, is application intercommunication within a heterogeneous network. Without MQSeries, complex communications programming may be required to connect the various applications together, but MQSeries provides a simple and reliable way of doing this.
<br><br><br>

<FONT SIZE="+2">What is MQSeries?</FONT>
<br>
Here you see the basic mechanism by which MQSeries communication takes place. The sending application prepares a message and puts it on a queue. The receiving application then gets the message from the queue, processes it, and eventually sends a reply back to the sender.
<P>
The MQSeries application programming interface is called the Message Queue Interface, or the MQI.
<P>
MQSeries can be used to implement message driven processing. This means that application execution can be driven by the arrival of messages on a queue.
<br><br><br>


<FONT SIZE="+2">The synchronous model</FONT>
<br>
Communication between applications may involve the putting of a request message and the subsequent waiting for a reply. This application design is known as the <I>synchronous model</I>. Using this model it would be expected that both applications are executing at the same time. The use of separate queues for the request and reply, while not essential,  enables simpler design.
<br><br><br>


<FONT SIZE="+2">The asynchronous model</FONT>
<br>
As the MQI is a non-blocking API it allows the application to continue processing upon completion of a call. Applications can be designed so that they do not wait for replies to requests but instead have another component of the application service the reply upon its arrival. This design model is known as the <I>asynchronous model</I> and is the natural style for MQSeries enabled applications.
In a variation of the <I>asynchronous model</I>, the sending application could put a sequence of messages on the queue, optionally continue with some other processing, and then return to retrieve and process the replies itself.
<br><br><br>


<FONT SIZE="+2">What is a message? </FONT>
<br>
A message has two parts, a message descriptor and the application data.
<P>
The message descriptor contains fields that specify certain control information about the message such as an identifier for the message.
The format of a message descriptor is fixed and is documented in the <I>MQSeries Application Programming Reference</I>.
<p>
The application data is the actual data sent from the sending application to the receiving application. <br>
It can be any data and is determined solely by the application requirements.
<p>
When an application gets a message from a queue, both the message descriptor and the application data are made available to the application.
<br><br><br>


<FONT SIZE="+2">What is a queue? </FONT>
<br>
In MQSeries, a queue is a place where messages can be stored.
<P>
There are two basic operations that can be performed on a queue. They are, adding a message to the end of a queue, and removing a message from the front of the queue.<br>
In MQSeries, these operations are called “putting” and “getting” messages.
<P>
Messages in a queue are delivered in first in, first out or priority sequence, whatever is defined for the queue.
<P>
Every queue has a name. Applications must open a queue specified by its name before they can put and get messages from it.
<br><br><br>


<FONT SIZE="+2">What is a queue  manager?</FONT>
<br>
The component of MQSeries that owns and manages queues is called a <I>queue manager</I>.
<P>
Every queue manager has a name. Through the MQI, an application is able to specify the name of the queue manager whose queues it needs to access.<br>
The queue manager is able to support multiple, concurrent applications accessing its queues.
<P>
A queue manager provides system administration interfaces to allow an MQSeries administrator to create, alter or delete a queue, start or stop a queue manager, permit access to queues and perform other administrative tasks.
<br><br><br>


<FONT SIZE="+2">An MQSeries object</FONT>
<br>
A queue is an example of an <I>MQSeries object</i>. Every MQSeries object has a set of <i>attributes</I> which specify the properties of the object.
<P>
These objects are created and maintained by using the system administration interfaces provided by the queue manager.
<P>
There are other types of MQSeries objects besides queues.
Here you can see only those that can be accessed through the MQI. That is, a namelist, a process and a queue manager.
<ul>
<li>Essentially, the namelist is a list of names which are usually the names of queues
<li>The process defines the properties of an application that can be started automatically by a trigger monitor
<li>The queue manager defines the properties of the queue manager itself.
</ul>
Click each type of MQSeries object to see examples of the attributes associated with that object type.
<br><br><br>


<FONT SIZE="+2">Queue managers in a network</FONT>
<br>
The movement of messages from one queue manager to another is via a transmission queue and a channel.  This movement is transparent to the applications and is performed asynchronously.
<P>
The queue managers use a higher level protocol which ensures that every message is delivered once and once only, even if the communications connection fails or there is a failure on either system. This is known as the <i>assured delivery</i> property of MQSeries.

<br><br><br>


<FONT SIZE="+2">Client/server</FONT>
<br>
In general, multiple client applications or even multiple images of the same client application, may put messages on the same queue, in order to request the services available from that queue.
<P>
The server application would get each message, in the predetermined queue message delivery order, then service the message.
<P>
If a reply was requested by the client then the server would respond by putting a reply message to the queue nominated by the client in the message descriptor.
<P>
The client application can nominate that it wishes to retrieve only the message or messages that correlate to its request messages, thereby enabling many client applications to be servicing a common reply queue.
<br><br><br>


<FONT SIZE="+2">Parallel processing</FONT>
<br>
As you have seen previously, the MQSeries enabled application does not have to wait for a reply from each message before proceeding to the next message.
<P>
This enables the application design to include components running in parallel, potentially deployed over different platforms, each servicing a message and responding to the nominated reply-to queue.
<P>
The client application could then wait for the reply messages, allowing for the possibility of messages arriving in any order or even the failure to receive a reply from one or more servers. This could require the application design to present a partial response or even create a separate process to service late replies.

<br><br><br>



<FONT SIZE="+2">Triggering</FONT>
<br>
MQSeries allows for the automatic activation of an application to service a queue. This mechanism, known as <i>Triggering</i>,  can occur based on the number of messages on a queue or for every message being put to a queue. <br>
The numbers on the diagram indicate the sequence of events. <br>
Triggering is fully described in a later topic.
<br><br><br>


<FONT SIZE="+2">MQSeries client applications</FONT>
<br>
An application on one system can put messages on queues owned by a queue manager on another system. Such an application is called an MQSeries client application.
<P>
A queue manager is able to support multiple, concurrent client applications running on different systems,  as well as multiple, concurrent applications that are running on the same system.
<P>
The MQI calls from a client application to a server queue manager are made over a communications connection. A fast, reliable communications connection is therefore required.
<br><br><br>


<FONT SIZE="+2">The MQSeries products</FONT>
<br>
An MQSeries product provides all the function needed to create and operate a queue manager. Here is a list of the MQSeries products. Note that the name of each product commences with the words, “MQSeries for ...”.
<P>
Most of the MQSeries products are available from IBM. You should consult the documentation for details.

<br><br><br>


<FONT SIZE="+2">Version 5</FONT>
<br>
The MQSeries products here are referred to as “Version 5”, “Version 5 products”, or “products on Version 5 platforms.”
<br><br><br>


<FONT SIZE="+2">MQSeries on UNIX systems</FONT>
<br>
The term “MQSeries on UNIX systems” is used to refer to these MQSeries products.
<br><br><br>


<FONT SIZE="+2">The MQSeries platforms</FONT>
<br>
An MQSeries platform is a system environment in which an application can issue calls to the MQI. Here are the MQSeries platforms.
<P>
There are three groups of platforms: The first group contains those platforms which can function as a client and as a server, the second contains those platforms which function as a server, and the third contains client only platforms.
<P>
Only an MQSeries for Windows queue manager is unable to support the attachment of MQSeries client applications.
<P>
Support for most of the platforms is available from IBM, and again you should consult the documentation for details.
<br><br><br>


<FONT SIZE="+2">UNIX systems</FONT>
<br>
The term “UNIX systems” is used to refer to these operating systems.
<br><br><br>


<FONT SIZE="+2">The supported programming languages</FONT>
<br>
Here is a list of all the programming languages, on the IBM supported MQSeries platforms, that can be used to write applications that issue calls to the MQI.
<P>
The C programming language is supported on all platforms, and COBOL is supported on all platforms except DOS, NCR UNIX, and Windows 3.1. <br>
Also, it is not supported for use with MQSeries for Windows.
<P>
Assembler is only supported by MQSeries for OS/390, RPG by MQSeries for AS/400, and TAL by MQSeries for Tandem NonStop Kernel.
<P>
All the remaining programming languages are supported on at least two platforms.
<br><br><br>

</font>
</body>
</html>
